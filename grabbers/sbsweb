#!/usr/bin/perl
#
# sbsweb TV guide grabber
#
# Good data, usually 14-21 days, but has a lot of variability
# in titles & subtitles.
#
# Currently only good for the main SBS channel, not SBS News, but
# has been coded to make adding any future channels easy.
#
#

my $version = '2.00';

use strict;
use Getopt::Long;
use POSIX;
use Data::Dumper;
use IO::File;
use XMLTV;
use HTML::TreeBuilder;
use Shepherd::Common;

# ---------------------------------------------------------------------------
# --- Global Variables

my $progname = "sbsweb";

my $DATASOURCE = "sbs.com.au";

my $lang = 'en';
my $debug = 0;
my $channels;
my $opt_channels;
my $opt = { };
my %stats;
my $shows;
my $runtime = time;
my $zerohr;
my $loc;
my $chanid;

# ---------------------------------------------------------------------------
# --- Setup

print "$progname $version\n";

$| = 1;

&get_command_line_options;

exit 0 if ($opt->{version});

&help if ($opt->{help});

&set_defaults;

&read_channels_file;

unless ($channels)
{
    print "ERROR: No channels requested. Please use --channels_file.\n";
    exit 33;
}
$chanid = $channels->{'SBS'};

&set_region;

&get_guide_data;

&tidy_data;

# print Dumper($shows) if ($debug);

&write_xml;

&Shepherd::Common::print_stats($progname, $version, $runtime, %stats);

&log("Done.");
exit;


# ---------------------------------------------------------------------------
# --- Subs

sub get_guide_data
{
    &log("Grabbing data for days " . $opt->{offset} .
         " - " . ($opt->{days} - 1) .
	 ($opt->{output} ? " into " . $opt->{output} : '') .
	 ".");

    # Calculate midnight on day zero in epoch time
    my @today = localtime($runtime); # 0=sec,1=min,2=hour,3=day,4=month,5=year,6=wday,7=yday,8=isdst
    $zerohr = $runtime - (($today[0]) + ($today[1]*60) + ($today[2]*60*60));

    my $startday = $opt->{offset};
    unless (!$startday and $today[2] > 5)
    {
	$startday--;
	&log("Fetching previous day's page for pre-5AM shows.");
    }

    for my $day ($startday .. ($opt->{days} - 1))
    { 
	my $daystr = &POSIX::strftime("%Y-%m-%d", localtime($runtime + ($day * 86400)));
	&log("Day $day: $daystr");

	my $url = "http://www.$DATASOURCE/schedule/$daystr/$loc";
	my $guidedata = &Shepherd::Common::get_url($url);
	exit 11 unless ($guidedata);

	&parse_guide($guidedata, $day);
    }
    &log("Found " . &num_items($shows) . " shows on " . scalar(keys %$shows) . " channels.");
}

sub parse_guide
{
    my ($guidedata, $day) = @_;

    &log("Parsing guide page (Day $day).") if ($debug);
    my $tree = HTML::TreeBuilder->new;
    $tree->no_space_compacting(1);
    $tree->parse($guidedata);
    $tree->eof;

    my $last_hr = 0;
    my $am_pm = 0;
    my $content = $tree->look_down(_tag => 'div', id => 'content');
    foreach my $block ($content->look_down(_tag => 'ul', class => 'tv_schedule'))
    {
	my $show;
	foreach my $li ($block->look_down(_tag => 'li'))
	{
	    my $start = $li->look_down(_tag => 'span', class => 'tv_schedule_time');
	    if ($start)
	    {
		if ($show->{start})
		{
		    $shows->{$chanid}->{$show->{start}} = $show;
		    $stats{'shows'}++;
		    $show = undef;
		}

		my ($hr, $min) = split(/:/, $start->as_text);

		# Times are 12hr clocks: if this hour is less than the last hour
		# we saw, we must have rolled over AM/PM. So add 12 hours to
		# the actual time.
		$am_pm += 12 if ($hr + $am_pm < $last_hr);
		$hr += $am_pm;
		$last_hr = $hr;

		$show->{start} = $zerohr + ($day * 86400) + ($hr * 3600) + ($min * 60);
		$show->{channel} = $chanid;
	    }
	    my $title = $li->look_down(_tag => 'a', class => 'leftpad');
	    if ($title)
	    {
		$show->{title} = $title->as_text;
		push (@{$show->{category}}, 'News') if ($show->{title} =~ /News/);
	    }
	    my $desc = $li->look_down(_tag => 'div', class => 'tv_schedule_item_description');
	    if ($desc)
	    {
		$desc = $desc->look_down(_tag => 'p')->as_text;
		$desc =~ s/ +$//; # Remove trailing spaces
		if ($desc =~ /\(Rpt\)/)
		{
		    $show->{'previously-shown'} = { };
		}
		if ($desc =~ /\bCC\b/)
		{
		    push @{$show->{'subtitles'}}, 'teletext';
		}
		if ($desc =~ /\bWS\b/)
		{
		    $show->{video}->{aspect} = '16:9';
		}
		if ($desc =~ s/^Movie: //)
		{
		    push @{$show->{category}}, 'movie';
		}
		if ($desc =~ /\(Sport\)/)
		{
		    push @{$show->{category}}, 'sports';
		}
		if ($desc =~ /\((Thriller|Documentary|Drama|[^\(]+ Series)\)/)
		{
		    my $cat = $1;
		    $cat =~ s/ Series$//;
		    push @{$show->{category}}, $cat;
		}
		if ($desc =~ / \(([12]\d\d\d)\) /)
		{
		    $show->{date} = $1;
		}
		if ($desc =~ /\b(G|PG|M|MA)\b/)
		{
		    $show->{rating} = $1;
		}
		if ($desc =~ /Directed by (.*?)(?: and| \(|[,\.])/)
		{
		    $show->{credits}{director} = [ $1 ];
		}
		if ($desc =~ / [sS]tar(?:s|ring) (.*?),? and (.*?)\./)
		{
		    $show->{credits}{actor} = [ split(/, /, $1), $2 ];
		}
		if ($desc =~ / \(From (.*?), in (.*?)\) /)
		{
		    my ($country, $language) = ($1, $2);

		    $country = 'USA' if ($country eq 'the US');
		    $country = 'UK' if ($country eq 'the UK');
		    $show->{country} = $country;

		    my @parts = split (/,/, $language);
		    $show->{language} = $parts[0];
		    my $lastpart = $parts[scalar(@parts)-1];
		    if ($lastpart =~ /^ *(.*) subtitles$/)
		    {
			push @{$show->{'subtitles'}}, split(/ and /, $1);
		    }
		}
		$desc =~ s/ +$//; # Remove trailing spaces

		$show->{desc} = $desc;
	    }
	}
	$shows->{$chanid}->{$show->{start}} = $show;
	$stats{'shows'}++;
    }
    $tree->delete;
}

# 1. Calculate stop times
# 2. Fix errors in title
# 3. Figure out likely subtitles
sub tidy_data
{
    &log("Tidying data.") if ($debug);
    foreach my $ch (keys %$shows)
    {
	my $last_start_time;
	foreach my $s (reverse sort keys %{$shows->{$ch}})
	{
	    # 1. Calculate stop times
	    
	    $shows->{$ch}->{$s}->{stop} = $last_start_time if ($last_start_time);
	    $last_start_time = $shows->{$ch}->{$s}->{start};

	    # 2. Guess subtitles.

            # Movies don't have subtitles
            unless (grep ($_ eq 'movie', @{$shows->{$ch}->{$s}->{category}}))
	    {
		if ($shows->{$ch}->{$s}->{title} =~ /(.*) (Ep \d+)/i)
		{
		    &log("Splitting title for Ep (" .
			$shows->{$ch}->{$s}->{title} .
			")") if ($debug);

		    $shows->{$ch}->{$s}->{title} = $1;
		    $shows->{$ch}->{$s}->{'sub-title'} = $2;
		}
		if ($shows->{$ch}->{$s}->{title} =~ /(.*) (?:Series|[12]\d\d\d) \d+/i)
		{
		    &log("Stripping series from title (" .
			 $shows->{$ch}->{$s}->{title} .
			 ")") if ($debug);
		    $shows->{$ch}->{$s}->{title} = $1;
		}
		if ($shows->{$ch}->{$s}->{title} =~ /(.*) [12]\d\d\d$/i)
		{
		    my $title = $1;
		    if ($title =~ / News/)
		    {
			&log("Stripping year from title (" .
			    $shows->{$ch}->{$s}->{title} .
			    ")") if ($debug);
			$shows->{$ch}->{$s}->{title} = $title;
		    }
		}
		unless (($shows->{$ch}->{$s}->{'sub-title'}))
		{
		    if ($shows->{$ch}->{$s}->{title} =~ /(.*)(?::| -) (.*)/
			    and
			length($1) > 5)
		    {
			&log("Splitting title (" .
			    $shows->{$ch}->{$s}->{title} .
			    ")") if ($debug);
			$shows->{$ch}->{$s}->{title} = $1;
			$shows->{$ch}->{$s}->{'sub-title'} = $2;
		    }
		    elsif ($shows->{$ch}->{$s}->{desc} =~ /^(.*?) - (.*)/)
		    {
			my ($subtitle, $rest) = ($1, $2);
			if (length ($subtitle) < 36
				and
			    grep(/^[A-Z]/, split(/ /, $subtitle)))
			{
			    &log("Splitting desc of " .
				$shows->{$ch}->{$s}->{title} .
				" (" .
				substr($shows->{$ch}->{$s}->{desc}, 0, 38) .
				"...)") if ($debug);

			    $shows->{$ch}->{$s}->{desc} = $rest;

			    # Drop subtitle if it's the same as the show name.
			    # Kinda unfortunate in that occasionally this will
			    # lead to incorrect dropping, but otherwise we get
			    # lots of bad subtitles.
			    unless ($shows->{$ch}->{$s}->{title} =~ /^$subtitle$/i)
			    {
				$shows->{$ch}->{$s}->{'sub-title'} = $subtitle;
			    }
			}
		    }
                }
	    }

            # 3. Fix title errors

	    if ($shows->{$ch}->{$s}->{title} =~ /(.*) \(([A-Z]{1,2})\)$/)
	    {
		&log("Dropping rating from title (" .
		    $shows->{$ch}->{$s}->{title} .
		    ")") if ($debug);
		$shows->{$ch}->{$s}->{title} = $1;
	    }

            if ($shows->{$ch}->{$s}->{title} =~ /(.*), The$/)
            {
                &log("Correcting title (" .
                     $shows->{$ch}->{$s}->{title} .
                     ")") if ($debug);
                $shows->{$ch}->{$s}->{title} = "The $1";
            }
            if ($shows->{$ch}->{$s}->{title} =~ /(.*) +\(?\*.*\*\)?/)
            {
                &log("Stripping title \"" .
                     $shows->{$ch}->{$s}->{title} .
                     '"') if ($debug);
                $shows->{$ch}->{$s}->{title} = $1;
            }

	    # 4. Title & sub-title whitespace tidy
	    $shows->{$ch}->{$s}->{title} = strip_whitespace($shows->{$ch}->{$s}->{title});
	    if ($shows->{$ch}->{$s}->{'sub-title'})
	    {
		$shows->{$ch}->{$s}->{'sub-title'} = strip_whitespace($shows->{$ch}->{$s}->{'sub-title'});
	    }
	}
    }
}

sub write_xml
{
    my %writer_args = ( encoding => 'UTF-8' );

    &log("Writing " . &num_items($shows) . " shows to XML.");

    if ($opt->{output})
    {
	my $fh = new IO::File(">" . $opt->{output})
	    or die "Can't open " . $opt->{output} . ": $!";
	$writer_args{OUTPUT} = $fh;
    }

    my $writer = new XMLTV::Writer(%writer_args);

    $writer->start
	( { 'source-info-url'    => $DATASOURCE,
	    'source-info-name'   => $progname,
	    'generator-info-name' => "$progname $version"} );

    for my $channel (sort keys %$channels)
    {
	$writer->write_channel( { 
		'display-name' => [ [ $channel, $lang ] ],
		'id' => $channels->{$channel} } );
    }

    foreach my $ch (sort keys %$shows)
    {
	foreach my $s (sort keys %{$shows->{$ch}})
	{
	    # Don't return shows with no stop time
	    unless ($shows->{$ch}->{$s}->{stop})
	    {
		&log("-- No stop time: dropping " . 
		     $shows->{$ch}->{$s}->{title}) if ($debug);
		next;
	    }

	    # Format for XMLTV-compliance
	    my %p = %{$shows->{$ch}->{$s}};
	    foreach my $field ('title', 'sub-title', 'desc', 'country')
	    {
		$p{$field} = [[ $p{$field}, $lang ]] if ($p{$field});
	    }
	    $p{language} = [ $p{language}, $lang ] if ($p{language});
	    $p{start} = &POSIX::strftime("%Y%m%d%H%M", localtime($p{start}));
	    $p{stop} = &POSIX::strftime("%Y%m%d%H%M", localtime($p{stop}));
	    $p{rating} = [[ $p{rating}, 'ABA', undef ]] if ($p{rating});
	    if ($p{category} && ref($p{category}) eq "ARRAY"
		    && $p{category}[0] && ref($p{category}[0]) ne "ARRAY") # obsolete 14/10/2007
	    {
		foreach (@{$p{category}})
		{
		    $_ = [ &Shepherd::Common::translate_category($_), $lang ];
		}
	    }
	    if ($p{subtitles})
	    {
		my @s;
		foreach (@{$p{subtitles}})
		{
		    push @s, { type => $_ };
		}
		$p{subtitles} = [ @s ];
	    }
	    $p{desc} = [ ] unless ($p{desc});
	    delete $p{pid};
	    delete $p{details};

	    if ($debug)
	    {
		&log("-> " . $shows->{$ch}->{$s}->{title} .
		     ($shows->{$ch}->{$s}->{'sub-title'} ?
		      ' ("' . $shows->{$ch}->{$s}->{'sub-title'} . '")' : ''));
	    }
#	    print Dumper(\%p);
	    $shows->{$ch}->{$s}->{start} = &POSIX::strftime("%Y%m%d%H%M", localtime($s));
	    $writer->write_programme(\%p);
	}
    }

    $writer->end();
}

# ---------------------------------------------------------------------
# Helper subs

sub num_items
{
    my $hash = shift;
    my $count = 0;
    foreach my $ch (keys %$hash)
    {
	$count += scalar keys %{$hash->{$ch}};
    }
    return $count;
}

sub strip_whitespace 
{
    $_[0] =~ /^\s*(.*?)\s*$/ ? $1 : $_[0];
}

# ---------------------------------------------------------------------
# Setup subs

sub set_region
{
    # Not totally sure about these regions... is regional NSW 'Sydney'
    # or 'Regional'?
    my $state = Shepherd::Common::which_state($opt->{region});
    my $loc = "SBS Regional";
    $loc = "SBS Television"     if ($state eq "NSW");
    $loc = "SBS Melbourne"      if ($state eq "VIC");
    $loc = "SBS Queensland"     if ($state eq "QLD");
    $loc = "SBS SA"             if ($state eq "SA" or $state eq 'NT' or $state eq 'TAS');
    $loc = "SBS WA"             if ($state eq "WA");

    &log("Location: $loc") if ($debug);
}


sub get_command_line_options
{
    &Getopt::Long::Configure('pass_through');
    &GetOptions($opt, qw(
			    help
			    debug
			    output=s
			    days=i
			    offset=i
			    region=i
			    channels_file=s
			    version
			));
    $debug = $opt->{debug};

    if (@ARGV)
    {
	&log("\nUnknown option(s): @ARGV\n");
    }
}

sub set_defaults
{
    my $defaults = {
	'days' => 7,
	'offset' => 0,
	'region' => 94,
	'output' => &getcwd . '/output.xmltv',
	'channels_file' => &getcwd . '/channels.conf'
    };

    foreach (keys %$defaults)
    {
	unless (defined $opt->{$_})
	{
	    $opt->{$_} = $defaults->{$_};
	}
    }

    $opt->{'days'} = 31 if ($opt->{'days'} > 31);

    &Shepherd::Common::set_defaults(
	stats => \%stats,
	delay => "1-5",
	debug => $debug,
	webwarper => $opt->{warper}
	);

    # Initialize stats
    %stats = ( );
    foreach (qw( shows ))
    {
	$stats{$_} = 0;
    }
}

sub read_channels_file 
{
    &read_config_file('channels', 'channels_file');
    unless ($channels)
    {
	print "ERROR: No channels requested. Please use --channels_file.\n";
	exit 33;
    }
    foreach (keys %$channels)
    {
	unless ($_ eq 'SBS')
	{
	    &log("Ignoring unsupported channel $_.");
	    delete $channels->{$_};
	}
    }
    $chanid = $channels->{'SBS'};
    unless (keys %$channels and $chanid)
    {
	&log("ERROR: No supported channels requested. Exiting.");
	exit 22;
    }

}

sub read_config_file
{
    my ($name, $arg) = @_;

    return unless ($opt->{$arg});
    &log("Reading $name file: $opt->{$arg}");
    if (-r $opt->{$arg})
    {
	local (@ARGV, $/) = ($opt->{$arg});
	no warnings 'all';
	eval <>;
	die "Can't parse $name file: $@" if ($@);
    }
    else
    {
	&log("Unable to read $name file.");
    }
}

sub log
{
    &Shepherd::Common::log(@_);
}

sub help
{
    print q{
Command-line options:
  --help                 Print this message
  --version              Show current version

  --output <file>        Write XML into the specified file
  --channels_file <file> Read channel subscriptions from file

  --region <n>           Grab data for region code <n>
  --days <n>             Grab <n> days of data (today being day 1)
  --offset <n>           Skip the first <n> days

  --debug                Print lots of debugging output
};
    exit 0;
}

