#!/usr/bin/perl -w

# sbsnews_website au_tv guide grabber - runs from "Shepherd" master grabber
#  * written by ltd
#  * uses SBS website for SBSNEWS data
#    (http://www.sbs.com.au/whatson/WNC-Schedule.html)
#  * when used in conjunction with Shepherd, shepherd can collect other channels
#    using other grabbers
#  * this does NOT use any config file - all settings are passed in from shepherd
#  * now uses http://www.sbs.com.au/schedule/digital

#  changelog:
#    0.01 24oct06      initial release
#    1.00 24jun08      paul rewrote for new web address

use strict;

my $progname = "sbsnews_website";
my $version = "1.00";

use XMLTV;
use POSIX qw(strftime);
use Getopt::Long;
use HTML::TreeBuilder;
use Shepherd::Common;
#use Data::Dumper::Simple;

#
# some initial cruft
#

my $script_start_time = time;
my %stats;
my $channels, my $opt_channels, my $gaps;

$| = 1;

#
# parse command line
#

my $opt;
$opt->{days} =		7;	# default
$opt->{offset} =	0;	# default
$opt->{outputfile} =	"output.xmltv"; # default
$opt->{channels_file} =  "";	# mandatory for user to specify
$opt->{debug} =		0;	# default
$opt->{lang} =		"en";	# default

GetOptions(
	'region=i'	=> \$opt->{region},	# ignored
	'timezone=s'	=> \$opt->{timezone},	# ignored
	'config-file=s'	=> \$opt->{configfile},	# ignored
	'days=i'	=> \$opt->{days},
	'offset=i'	=> \$opt->{offset},
	'channels_file=s' => \$opt->{channels_file},
	'gaps_file=s'	=> \$opt->{gaps_file},
	'output=s'	=> \$opt->{outputfile},
	'debug+'	=> \$opt->{debug},
	'lang=s'	=> \$opt->{lang},
	'help'		=> \$opt->{help},
	'verbose'	=> \$opt->{help},
	'version'	=> \$opt->{version},
	'ready'		=> \$opt->{version},
	'v'		=> \$opt->{help});

&help if ($opt->{help});

if ($opt->{version}) {
	printf "%s %s\n",$progname,$version;
	printf "Collects news lineup for SBSNEWS from SBS Web site." if $opt->{desc};
	exit(0);
}

die "no channel file specified, see --help for instructions\n", if ($opt->{channels_file} eq "");

#
# go go go!
#

&log(sprintf "going to %sfetch %d days%s of data into %s",
	(defined $opt->{gaps_file} ? "micro-gap " : ""),
	$opt->{days},
	($opt->{offset} ? " (skipping first $opt->{offset} days)" : ""),
	$opt->{outputfile});

# read channels file
if (-r $opt->{channels_file}) {
	local (@ARGV, $/) = ($opt->{channels_file});
	no warnings 'all'; eval <>; die "$@" if $@;
} else {
	die "WARNING: channels file $opt->{channels_file} could not be read: $!\n";
}

# unless we have SBSNEWS defined as a channel, nothing to do!

die "no SBSNEWS channel found in channel lineup from $opt->{channels_file}\n"
  unless (defined $channels->{'SBS News'});

if (defined $opt->{gaps_file}) {
	if (-r $opt->{gaps_file}) {
		local (@ARGV, $/) = ($opt->{gaps_file});
		no warnings 'all'; eval <>; die "$@" if $@;
	} else {
		die "WARNING: gaps file $opt->{gaps_file} could not be read: $!\n";
	}

	die "no SBSNEWS channel in gaps lineup, nothing to do!\n"
	  unless ((defined $gaps) && (defined $gaps->{'SBS News'}));
}

my $week = &get_sbsnews_data();
$week = &fix_gaps($week);
&write_data($week);
&print_stats;
exit(0);

######################################################################################################
# help

sub help
{
	print<<EOF
$progname $version

options are as follows:
	--help			show these help options
	--days=N		fetch 'n' days of data (default: $opt->{days})
	--output=file		send xml output to file (default: "$opt->{outputfile}")
	--debug			increase debug level
	--lang=[s]		set language of xmltv output data (default $opt->{lang})
	--channels_file=file	where to get channel data from
	--gaps_file=file	micro-fetch gaps only

EOF
;

	exit(0);
}

######################################################################################################

sub log
{
	my ($entry) = @_;
	printf "%s\n",$entry;
}

######################################################################################################

sub print_time
{
	my $t = shift;
	return sprintf "%02d:%02d",$t/(60*60),$t/60%60;
}

######################################################################################################

sub nice_time
{
	my $t = shift;
	return POSIX::strftime("%Y%m%d%H%M",localtime($t));
}

######################################################################################################

sub print_stats
{
	printf "STATS: %s v%s completed in %d seconds",$progname, $version, (time-$script_start_time);
	foreach my $key (sort keys %stats) {
		printf ", %d %s",$stats{$key},$key;
	}
	printf "\n";
}

######################################################################################################

sub cook_data
{
	my $raw = shift;
	my $time_column = shift;
	my $title_column = shift;
	my $week = shift;
	my $day = shift;

	my $row = 0; my $started = 0;
	my $previous_time = 0;
	while (1) {
		#print $raw->{$time_column}->{$row}->{title} . "\n";
		#print $raw->{$title_column}->{$row}->{title} . "\n";

		my ($start_time, $stop_time);
		if ($raw->{$time_column}->{$row}->{title} &&
				$raw->{$time_column}->{$row}->{title} =~
				/^(\d{1,2})[:.](\d{1,2})\s*\-\s*(\d{1,2})[:.](\d{1,2})$/) {
			$started=1;

			$start_time = ($1*60*60)+($2*60);
			$stop_time = ($3*60*60)+($4*60);
			if ($start_time > $stop_time) {
				$stop_time += (24*60*60);
			} elsif ($previous_time > $start_time) {
				$day = ($day + 1) % 7
			}
			$previous_time = $stop_time;
		} else {
			$row += 1;
			if (!$started) {
				next;
			} else {
				last;
			}
		}

		#print "$day ".&print_time($start_time)." ".&print_time($stop_time)."\n";

		my $prog;
		$prog->{channel} = $channels->{'SBS News'};
		$prog->{start} = $start_time;
		$prog->{stop} = $stop_time;
		$prog->{title} = [[ $raw->{$title_column}->{$row}->{title}, $opt->{lang} ]];
		$prog->{'sub-title'} = [[ $raw->{$title_column}->{$row}->{subtitle}, $opt->{lang} ]]
				if $raw->{$title_column}->{$row}->{subtitle};
		$prog->{category} = [[ 'News', undef ]]
				if ($raw->{$title_column}->{$row}->{title} =~ /News/i);
		&Shepherd::Common::cleanup($prog);

		$week->{$day}->{$start_time} = $prog;

		#warn Dumper($prog);

		$row += 1;
	};
	#print "$day = $row\n";

	return $week;
}

sub get_sbsnews_data
{
	my $file = "WNC-Schedule.html";

	# 7 days in one URL: http://www.sbs.com.au/whatson/WNC-Schedule.html
	my $data = &Shepherd::Common::get_url( url => "http://www.sbs.com.au/schedule/digital",
		    stats => \%stats,
		    retries => 4,
		    debug => $opt->{debug} ? 3 : 1,
		    retry_delay => 120,
 		    # the website doesn't support 'If-Modified-Since' headers but we can live in hope
		    mirror => $file);

	$data = &Shepherd::Common::get_mirror_file($file, 14) if (!$data);

	exit 22 unless ($data);

	# read html
	my $tree = HTML::TreeBuilder->new_from_content($data);
	my $table = $tree->look_down('_tag' => 'div', id => 'digital_list');
	die "Format has changed can't find digital_list\n" unless ($table);
	my $raw;
	my ($column, $row) = (0,0);
	foreach my $ul ($table->look_down('_tag' => 'ul')) {
		foreach my $li ($ul->look_down('_tag' => 'li')) {
			my $title = $li->as_trimmed_text();
			my $subtitle = $li->look_down('_tag' => 'span');
			if (defined $subtitle) {
				$subtitle = $subtitle->as_trimmed_text();
				$title =~ s/$subtitle//;
			} else {
				$subtitle = "";
			}
			#print "$title<$subtitle\t";
			$raw->{$column}->{$row}->{title} = $title;
			$raw->{$column}->{$row}->{subtitle} = $subtitle;
			$row += 1;
		}
		#print "\n";
		$row = 0;
		$column += 1;
	}
	$tree->delete;
	die "didn't find any programmes!  has the HTML format changed?\n" unless ($column==9);

	# make ideal week
	#my %day_range_names = (sunday=>0,monday=>1,tuesday=>2,wednesday=>3,thursday=>4,friday=>5,saturday=>6);
	my $week;
	foreach my $day (0 .. 6) {
		if ($day == 0) {
			$week = cook_data($raw, 8, 7, $week, $day)
		} else {
			$week = cook_data($raw, 0, $day, $week, $day)
		}
	}

	return $week;
}

######################################################################################################

sub fix_gaps
{
	my $week = shift;

	&log("Extending stop times to fill in small guide data holes.");

	my @day_names = ("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday");

	my @list = sort {$b <=> $a} keys %{$week->{0}};
	my $prev_start = $list[$#list] + (24*60*60);

	for (my $day=6; $day >= 0; $day--) {
		@list = sort {$b <=> $a} keys %{$week->{$day}};

		foreach my $start (@list) {
			my $stop = $week->{$day}->{$start}->{stop};

			if ($stop != $prev_start) {
				my $diff = $prev_start - $stop;
				my $new_day = $day;
				if ($stop >= (24*60*60)) {
					$stop -= (24*60*60);
					$prev_start -= (24*60*60);
					$new_day = ($day + 1) % 7;
				}

				# Gaps of at least 30 minutes before 7am are Station Closes
				if ($diff / 60 >= 30 and (($prev_start % (24*60*60)) <= (7*60*60))) {
					my $new_prog = { title => [[ 'Station Close', $opt->{lang} ]],
							channel => $channels->{'SBS News'},
							start => $stop,
							stop => $prev_start };
					&log(sprintf "Inserting \"Station Close\" on %s between %s to %s",
							$day_names[$new_day],
							&print_time($new_prog->{start}),
							&print_time($new_prog->{stop}));
					$week->{$new_day}->{$stop} = $new_prog;
					$stats{gap_add_close}++

				# Gaps of 15 or more minutes in other times are genuine holes
				} elsif ($diff / 60 >= 15) {
					my $new_prog = { title => [[ 'Gap', $opt->{lang} ]],
							channel => $channels->{'SBS News'},
							start => $stop,
							stop => $prev_start };
					&log(sprintf "Inserting \"Gap\" on %s between %s to %s",
							$day_names[$new_day],
							&print_time($new_prog->{start}),
							&print_time($new_prog->{stop}));
					$week->{$new_day}->{$stop} = $new_prog;
					$stats{gap_add_gap}++

				# Gaps of <15 minutes shall be filled in
				} else {
					&log(sprintf "Extending stop time of \"%s\" by %d mins, from %s to %s on %s.", 
						$week->{$day}->{$start}->{title}[0][0],
						$diff/60,
						&print_time($week->{$day}->{$start}->{stop}),
						&print_time($week->{$day}->{$start}->{stop} + $diff),
						$day_names[$day]) if ($opt->{debug});
					$week->{$day}->{$start}->{stop} += $diff;
					$stats{gap_extended_stops}++
				}
			}
			$prev_start = $start;
		}
		$prev_start += (24*60*60);
	}
	return $week;
}

######################################################################################################

sub write_data
{
	my $week = shift;

	my %writer_args = ( encoding => 'ISO-8859-1' );
	my $fh = new IO::File(">$opt->{outputfile}") || die "can't open $opt->{outputfile}: $!";
	$writer_args{OUTPUT} = $fh;

	my $writer = new XMLTV::Writer(%writer_args);

	$writer->start
	  ( { 'source-info-name'   => "$progname $version",
	      'generator-info-name' => "$progname $version"} );
	$writer->write_channel( {
		'display-name' => [[ 'SBS News', $opt->{lang} ]],
		'id' => $channels->{'SBS News'} } );

	my $currday = $script_start_time;
	my @today = localtime($currday); # 0=sec,1=min,2=hour,3=day,4=month,5=year,6=wday,7=yday,8=isdst
	# set currday back to match midnight.
	$currday -= (($today[0]) + ($today[1]*60) + ($today[2]*60*60));

	foreach my $offset ($opt->{offset} .. ($opt->{days}-1)) {
		my $day = ($today[6] + $offset) % 7;
 		my $remove;

		# fill gap at start of first day
		if ($offset == $opt->{offset}) {
			my $prev_day = $day - 1;
			$prev_day = 6 if $prev_day < 0;

			my @sorted_starts = (sort {$a <=> $b} keys %{$week->{$prev_day}});
			my $last_prog = { %{$week->{$prev_day}->{$sorted_starts[$#sorted_starts]}}};

			if ($last_prog->{stop} > (24*60*60)) {
				$last_prog->{start} = $last_prog->{start} - (24*60*60);
				$last_prog->{stop} = $last_prog->{stop} - (24*60*60);

				$week->{$day}->{$last_prog->{start}} = $last_prog;
				$remove = $last_prog->{start};
			}
		}

		foreach my $start (sort {$a <=> $b} keys %{$week->{$day}}) {
			my $start_time = $currday + $offset*(24*60*60) + $week->{$day}->{$start}->{start};
			my $stop_time = $currday + $offset*(24*60*60) + $week->{$day}->{$start}->{stop};;

			# if we are fetching microgaps, skip if this isn't
			# in a micro-gap
			if (defined $opt->{gaps_file}) {
				my $found_gap_match = 0;
				foreach my $g (@{($gaps->{'SBS News'})}) {
					my ($s, $e) = split(/-/,$g);

					$found_gap_match = 1 if
					   ((($s >= $start_time) &&
					     ($s <= $stop_time)) ||
					    (($e >= $start_time) &&
					     ($e <= $stop_time)) ||
					    (($s <= $start_time) &&
					     ($e >= $stop_time)));
				}
				if (!$found_gap_match) {
					$stats{gaps_skipped}++;
					next;
				} else {
					$stats{gaps_included}++;
				}
			}

			my $prog = { %{$week->{$day}->{$start}}};
			$prog->{start} = &nice_time($start_time);
			$prog->{stop} = &nice_time($stop_time);

			$writer->write_programme($prog);
			$stats{progs}++;
		}

		if ($remove) {
			delete $week->{$day}->{$remove};
		}
	}

	$writer->end();
}

######################################################################################################
