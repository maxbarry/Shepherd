#!/usr/bin/perl -w

# network TEN au_tv guide grabber - runs from "Shepherd" master grabber
#  * grabs data from the network TEN website (http://www.ten.com.au)
#    for channel TEN only
#  * this does NOT use any config file - all settings are passed in from shepherd

use strict;

my $progname = "ten_website";
my $version = "2.00";

use XMLTV;
use POSIX qw(strftime mktime);
use Getopt::Long;
use Data::Dumper;
use Shepherd::Common;
use XML::Simple;
use HTML::TreeBuilder;
use Data::Dumper;

#
# global variables and settings
#

$| = 1;
my $script_start_time = time;
my %stats;
my $channels, my $opt_channels, my $gaps;
my $data_cache;
my $d;
my $opt;


#
# parse command line
#

$opt->{days} =          7;			# default
$opt->{outputfile} =    "output.xmltv";		# default
$opt->{cache_file} =	$progname.".storable2.cache";	# default
$opt->{lang} =		"en";
$opt->{region} =	94;

GetOptions(
	'log-http'	=> \$opt->{log_http},
	'region=i'	=> \$opt->{region},
	'days=i'	=> \$opt->{days},
	'offset=i'	=> \$opt->{offset},
	'timezone=s'	=> \$opt->{timezone},
	'channels_file=s' => \$opt->{channels_file},
	'gaps_file=s'	=> \$opt->{gaps_file},
	'output=s'	=> \$opt->{outputfile},
	'cache-file=s'	=> \$opt->{cache_file},
	'fast'		=> \$opt->{fast},
	'no-cache'	=> \$opt->{no_cache},
	'no-details'	=> \$opt->{no_details},
	'debug+'	=> \$opt->{debug},
	'warper'	=> \$opt->{warper},
	'lang=s'	=> \$opt->{lang},
	'no-hdtv-flags'	=> \$opt->{no_hdtv_flags},
	'obfuscate'	=> \$opt->{obfuscate},

	'help'		=> \$opt->{help},
	'verbose'	=> \$opt->{help},
	'version'	=> \$opt->{version},
	'ready'		=> \$opt->{version},
	'v'		=> \$opt->{help});

&help if ($opt->{help});

if ($opt->{version}) {
	printf "%s %s\n",$progname,$version;
	exit(0);
}

die "no channel file specified, see --help for instructions\n", if (!$opt->{channels_file});
$opt->{days} = 7 if ($opt->{days} > 7); # limit to a max of 7 days

# check XMLTV version for HDTV compatability
my @xmltv_version = split(/\./,$XMLTV::VERSION);
if (($xmltv_version[0] <= 0) && ($xmltv_version[1] <= "5") && ($xmltv_version[2] <= "43")) {
	&log("XMLTV version ".$XMLTV::VERSION." too old to support HDTV flags. Disabling HDTV flags.");
	$opt->{no_hdtv_flags} = 1;
	$stats{disabled_hdtv_flag}++;
}

#
# go go go!
#

&log(sprintf "going to %sgrab %d days%s of data into %s (%s%s%s%s)",
	(defined $opt->{gaps_file} ? "micro-gap " : ""),
	$opt->{days},
	(defined $opt->{offset} ? " (skipping first $opt->{offset} days)" : ""),
	$opt->{outputfile},
	(defined $opt->{fast} ? "with haste" : "slowly"),
	(defined $opt->{warper} ? ", anonymously" : ""),
	(defined $opt->{no_details} ? ", without details" : ", with details"),
	(defined $opt->{no_cache} ? ", without caching" : ", with caching"));

# normalize starttime to an hour..
my $starttime = time;
my $endtime = $starttime + ($opt->{days} * 86400);
$starttime += (86400 * $opt->{offset}) if (defined $opt->{offset});

# set defaults
Shepherd::Common::set_default("debug", (defined $opt->{debug} ? 2 : 0));
Shepherd::Common::set_default("webwarper", 1) if (defined $opt->{warper});
Shepherd::Common::set_default("squid", 1) if (defined $opt->{obfuscate});
Shepherd::Common::set_default("referer", "last");
Shepherd::Common::set_default("retry_delay", 10);
Shepherd::Common::setup_ua('cookie_jar' => 1, 'fake' => 1);

# read channels file
if (-r $opt->{channels_file}) {
	local (@ARGV, $/) = ($opt->{channels_file});
	no warnings 'all'; eval <>; die "$@" if $@;
} else {
	die "WARNING: channels file $opt->{channels_file} could not be read\n";
}

foreach my $chan (keys %$channels)
{
    unless (grep($chan eq $_, ('TEN', 'ONE Digital', 'ONE HD', 'TEN HD')))
    {
	&log("Ignoring unsupported channel $_.");
	delete $channels->{$_};
    }
}
unless (keys %$channels)
{
    &log("ERROR: No supported channels requested. Exiting.");
    exit 22;
}

if (defined $opt->{gaps_file}) {
	if (-r $opt->{gaps_file}) {
		local (@ARGV, $/) = ($opt->{gaps_file});
		no warnings 'all'; eval <>; die "$@" if $@;
	} else {
		die "WARNING: gaps file $opt->{gaps_file} could not be read: $!\n";
	}

	die "No supported channels in gaps lineup, nothing to do!" unless ($gaps and ($gaps->{TEN} or $gaps->{'TEN HD'}));
}


&read_cache unless (defined $opt->{no_cache});

$stats{programmes} = 0;

foreach (keys %$channels)
{
    &get_summary_page($_);
}

&get_detail_pages unless (defined $opt->{no_details});

&write_cache unless (defined $opt->{no_cache});

&write_xmltv;

&print_stats;
exit(0);

##############################################################################
# help

sub help
{
	print<<EOF
$progname $version

options are as follows:
	--help			show these help options
	--days=N		fetch 'n' days of data (default: $opt->{days})
	--output=file		send xml output to file (default: "$opt->{outputfile}")
	--no-cache		don't use a cache to optimize (reduce) number of web queries
	--no-details		don't fetch detailed descriptions (default: do)
	--no-hdtv-flags		don't mark HD programs as being in HDTV (default: do)
	--cache-file=file	where to store cache (default "$opt->{cache_file}")
	--fast			don't run slow - get data as quick as you can - not recommended

	--debug			increase debug level
	--warper		fetch data using WebWarper web anonymizer service
	--obfuscate		pretend to be a proxy servicing multiple clients
	--lang=[s]		set language of xmltv output data (default $opt->{lang})

	--region=N		set region for where to collect data from (default: $opt->{region})
	--channels_file=file	where to get channel data from
	--gaps_file=file        micro-fetch gaps only

EOF
;

	exit(0);
}

##############################################################################
# populate cache

sub read_cache
{
	my $store = Shepherd::Common::read_cache(\$opt->{cache_file});
	
	if ($store) {
		$data_cache = $store->{data_cache};
	}
}

##############################################################################
# write out updated cache

sub write_cache
{
	# delete cache file from older OCR-based ten_website grabber
	my $old_cache_file = $progname.".storable.cache";
	unlink($old_cache_file) if (-f $old_cache_file);

	# cleanup old entries from cache
	for my $k (keys %{($data_cache->{prog_cache})}) {
		if ($data_cache->{prog_cache}->{$k}->{last_used} < (time-(86400*14))) {
			delete $data_cache->{prog_cache}->{$k};
			$stats{expired_from_cache}++;
		}
	}

	my $store;
	$store->{data_cache} = $data_cache;
	Shepherd::Common::write_cache($opt->{cache_file}, $store);
}

##############################################################################

sub log
{
	my ($entry) = @_;
	printf "%s\n",$entry;
}

##############################################################################

sub print_stats
{
	printf "STATS: %s v%s completed in %d seconds",$progname, $version, time-$script_start_time;
	foreach my $key (sort keys %stats) {
		printf ", %d %s",$stats{$key},$key;
	}
	printf "\n";
}

##############################################################################

sub write_xmltv
{
	my $writer;

	my %writer_args = ( encoding => 'ISO-8859-1' );
	if ($opt->{outputfile}) {
		my $fh = new IO::File(">$opt->{outputfile}") || die "can't open $opt->{outputfile}: $!";
		$writer_args{OUTPUT} = $fh;
	}

	$writer = new XMLTV::Writer(%writer_args);

	$writer->start
	  ( { 'source-info-name'   => "$progname $version",
	      'generator-info-name' => "$progname $version"} );

        foreach my $chan (keys %$channels)
	{
	    print "Writing channel $chan.\n";
	    $writer->write_channel( {'display-name' => [[ $chan, $opt->{lang} ]], 'id' => $channels->{$chan} } );
	}

	foreach my $prog (@{($d->{progs})}) {
		delete $prog->{'link'};

		Shepherd::Common::cleanup($prog);
#		printf "DEBUG: programme xmltv: ".Dumper($prog) if (defined $opt->{debug});
		printf "- %s (%s)\n", $prog->{title}->[0][0], $prog->{channel};
		$writer->write_programme($prog);
	}

	$writer->end();
}

##############################################################################

sub get_summary_page
{
	my $channel = shift;

	my $state = Shepherd::Common::which_state($opt->{region});

	my $reg = "sydney";				# sydney
	$reg = "melbourne"	if ($state eq "VIC");	# melbourne
	$reg = "brisbane"	if ($state eq "QLD");	# brisbane
	$reg = "perth"		if ($state eq "WA");	# perth
	$reg = "adelaide"	if ($state eq "SA");	# adelaide

	&log("Fetching summary page ($channel $reg)");

	my $url = sprintf "http://ten.com.au/tv-schedule/full?location=%s%s&uid=", 
			    $reg,
			    $channel =~ /^ONE/ ? '&hd=1' : '';
	my $tries = 5;
	my ($data, $success, $status_msg, $bytes_fetched, $seconds_slept, $failed_attempts, $response) =
	  Shepherd::Common::get_url(url => $url, retries => ($tries-1));

	$stats{failed_requests} += $failed_attempts;
	$stats{slept_for} += $seconds_slept;
	$stats{bytes_fetched} += $bytes_fetched;
	my $prev_num_programmes = $stats{programmes};

	if ((!$data) || (!$success)) {
		&log("Failed to fetch '$url' after $tries attempts.\nAborting: likely format change or blocked!");
		exit(10);
	}

	$stats{http_successful_requests}++;

	my $xml = new XML::Simple;
        $data = $xml->XMLin($data);
	foreach my $show (@{$data->{program}}) 
	{
		if (!$show->{startTime} or !$show->{endTime}) 
		{
			$stats{prog_bad_time}++;
			next;
		}
		if (!$show->{program_name}) 
		{
			$stats{prog_no_title}++;
			next;
		}

		my $prog_start = substr($show->{startTime},0,10);
		my $prog_stop =  substr($show->{endTime},0,10);

		# only fetch within start/end times specified.
		if (($prog_stop < $starttime) || ($prog_start > $endtime)) 
		{
			$stats{prog_outside_window}++;
			next;
		}

		# if microgap fetching only fetch within gaps
		if (defined $opt->{gaps_file}) 
		{
			unless (&is_within_gaps($gaps->{$channel}, $prog_start, $prog_stop))
			{
				$stats{gaps_skipped}++;
				next;
			}
		}

		my $prog;
		$prog->{channel} = $channels->{$channel};
		$prog->{start} = POSIX::strftime("%Y%m%d%H%M", localtime($prog_start));
		$prog->{stop} =  POSIX::strftime("%Y%m%d%H%M", localtime($prog_stop));
		$prog->{title} = [[ $show->{program_name}, $opt->{lang} ]];
		$prog->{link} = $show->{link};
		$prog->{link} =~ s/^\/tvguide_synopsis\.html\?id=//;

		$d->{progs}->[$stats{programmes}] = $prog;
		$stats{programmes}++;

		&log(sprintf " %3d. %s", $stats{programmes}, $show->{program_name}) if ($opt->{debug});
	}

	&log(" summary returned data for ".($stats{programmes} - $prev_num_programmes)." programmes");
}

##############################################################################


# Use new URL which is heaps better for parsing & has great details:
#
#   http://ten.com.au/feeds/$STATE/$URL
#
# ...where $STATE is one of qw( nsw vic qld sa wa )
# and $URL is the 'id' component of the guide 'link' field. (For example, 
# 'Rugby_Spring_Tour_2008_2518335.xml'.)
#
# Interesting fields in main 'program' tag, set to '="true"' if they exist:
# repeat,close-captioned,high-definition,widescreen,live
#
sub get_detail_pages
{
	my $prog_count;
	$stats{used_detailed_cache} = 0;
	&log("fetching up to ".$stats{programmes}." detail pages...");

	my $state = lc(Shepherd::Common::which_state($opt->{region}));
	for (my $i=0; $i < $stats{programmes}; $i++) {
		my $url = $d->{progs}->[$i]->{link};
		my $was_in_cache = 0;
		$prog_count++;

		# some descriptions all end up being the same.  just skip fetching details on these
		my @skip_these = qw( Home_Shopping Hillsong This_Is_Your_Day_With_Benny_Hinn Kenneth_Copeland \
				     Life_Today_With_James_Robison Christian_City_TV Toasted_TV );
		my $id = $1 if $url =~ /^(.*)_\d+\.xml$/;
		if (!$id or grep($id eq $_, @skip_these)) {
		    $stats{skipped_detail_pages}++;
		    next;
		}

		if (($prog_count % 10) == 1) {
			&log(" .. at programme ".$prog_count." of ".$stats{programmes}." (".$stats{used_detailed_cache}." from cache)");
		}

		if (!defined $data_cache->{prog_cache}->{$url}) {
			my $fetch_url = "http://ten.com.au/feeds/$state/$url";
			my $tries = 3;

			&log("fetching prog ".$prog_count." [".$fetch_url."] ..") if (defined $opt->{debug} && $opt->{debug} > 1);

			my ($data, $success, $status_msg, $bytes_fetched, $seconds_slept, $failed_attempts, $response) =
			  Shepherd::Common::get_url(url => $fetch_url, retries => ($tries-1));

			$stats{failed_requests} += $failed_attempts;
			$stats{slept_for} += $seconds_slept;
			$stats{bytes_fetched} += $bytes_fetched;

			if ((!$data) || (!$success)) {
				&log("Failed to fetch '$fetch_url' after $tries attempts. Has the format changed?");
				$stats{bad_detail_response}++;

				if ($stats{bad_detail_response} >= 3) {
					&log($stats{bad_detail_response}." bad detailed responses.  Disabling fetching details.");
					return;
				}

				next;
			}
			$stats{http_successful_requests}++;

			my $xml = new XML::Simple;
			$data = $xml->XMLin($data);
			my $prog = $data->{program};

			print Dumper($data);

			my $show = $d->{progs}->[$i];
			my %type;
			$show->{'title'} = [[ $prog->{'program_name'}, $opt->{lang} ]];
			$show->{'sub-title'} = [[ $prog->{'episode_name'}, $opt->{lang} ]] unless (ref $prog->{'episode_name'});
			$show->{video}->{aspect} = "16:9" if ($prog->{widescreen});
			$show->{video}->{quality} = "HDTV" if ($prog->{'high-definition'});
			$show->{'previously-shown'} = { } if ($prog->{repeat});
			$show->{'desc'} = [[ $prog->{'synopsis'}, $opt->{lang} ]] unless (ref $prog->{'synopsis'});
			$show->{'language'} = [ $prog->{'language'}, $opt->{lang} ] unless (ref $prog->{language});
			$type{live} = 1 if ($prog->{'live'});
			$type{series} = 1 if ($prog->{'program_type'} eq 'Series');
			$type{movie} = 1 if ($prog->{'program_type'} eq 'Movie');
			my $rating = $prog->{'classification'};
			$rating .= sprintf " (%s)", $prog->{'consumer_advice'} unless (ref $prog->{'consumer_advice'});
			$show->{'rating'} = [[ $rating, 'ABA', undef ]];
			

			if ($prog->{actors} and !ref $prog->{actors})
			{
			    $show->{credits}{actor} = [ split(/,/, $prog->{actors}) ];
			}
			if ($prog->{director} and !ref $prog->{director})
			{
			    my @tmp = split(/,/, $prog->{director});
			    print "DIRECTOR: @tmp.\n";
			    $show->{credits}{director} = [ @tmp ] if (@tmp);
			}
			&Shepherd::Common::cleanup($show->{credits});

			$show->{'country'} = [[ $prog->{'country'}, $opt->{lang} ]] unless (ref $prog->{'country'});
			$show->{'date'} = $prog->{'prod_year'} unless (ref $prog->{'prod_year'});
			$show->{'category'} = [ &Shepherd::Common::generate_category(
			          $show->{'title'}[0][0], $prog->{'hww_genre'}, %type) ];
			$show->{'channel'} = $d->{progs}->[$i]->{'channel'};

			$d->{progs}->[$i] = $show;
			$data_cache->{prog_cache}->{$url} = $show;
		} else {
			print "Using cache ($url).\n" if ($opt->{'debug'});
			foreach (keys %{$data_cache->{prog_cache}->{$url}})
			{
			    next if ($_ eq 'channel' or $_ eq 'last_used');
			    $d->{progs}->[$i]->{$_} = $data_cache->{prog_cache}->{$url}->{$_};
			}

			$stats{used_detailed_cache}++;
			$was_in_cache = 1;
		}
		$data_cache->{prog_cache}->{$url}->{last_used} = time;

#		printf "DEBUG: prog $i details: ".Dumper($d->{progs}->[$i]) if (defined $opt->{debug});

		unless ($opt->{fast} or  $was_in_cache) 
		{
			my $sleep_for = int(rand(3));
			sleep $sleep_for;
			$stats{slept_for} += $sleep_for;
		}
	}
}


########################################################################
# Calculates whether a show's time window is within our wanted gaps.
# 
# EG: next unless (&is_within_gaps($gaps->{'TEN'}, $start, $stop);
#
# Arguments:
#  channel_gaps:   relevent channel component of gaps file
#  start:          start time in epoch format
#  stop:           stop time in epoch format
#
sub is_within_gaps
{
    my ($channel_gaps, $start, $stop) = @_;

    foreach my $gap (@$channel_gaps)
    {
        if ($gap =~ /(\d+)-(\d+)/)
        {
            return 1 if ($stop > $1 and $start < $2);
        }
    }
    return 0;
}


