#!/usr/bin/perl -w
# vi: ts=4 sw=4
#
# OzTivo Programme Guide Grabber for Shepherd
# Chris Williams <shepherd@psychogeeks.com>
# Copyright Chris Williams, 2008.
#
use strict;

use Getopt::Long;
use Shepherd::Common;
use XML::LibXML;
use URI::Escape;
use POSIX;
use Time::Local;

# ensure 'cache' directory exists (or is created) before the 'use HTTP::Cache'
# below or it'll fail
BEGIN {
	-d "cache" or mkdir "cache" or die "Cannot create directory cache: $!";
}

# Setup caching so we are good Netizens
# This works transparently under the LWP::* modules
#
use HTTP::Cache::Transparent (
	BasePath  => "cache",
	MaxAge	  => 8*24, # hours
	Verbose   => 0,
	NoUpdate  => 15*60,
	ApproveContent => sub { return $_[0]->is_success },
);


################################################################################
# Global variables
#
my $progname = 'oztivo';
my $nicename = 'OzTivo';
my $version = '2.12';
my $config_file = "$progname.pw";
my $output_file = undef;
my $channels_file;
my $ver;
my $ready_check;
my $configure;
my $region = undef;
my $days = 7;

# Channel to XMLTvID map from channels file
#
my $channels, my $opt_channels;

# User name and password from configuration file
#
my $user;
my $pw;


################################################################################
# Setup a mapping file to go from a Shepherd channel name to an OzTivo name
# Taking into consideration the region.
#
# The order of search for a mapping is;
# 	Region specific mapping (under numeric region code keys)
#	National mapping (under hash key 'National')
#	Pay TV mapping (under hash key 'PAY')
# First mapping found wins.
#
my %s_to_o_map = (
	'National' => {	# National channel mappings, all timeshifted
		'ABC2' => 'ABC2',
		'SBS News' => 'SBS-NEWS',
		'7HD' => 'SevenHD',
		'Nine HD' => 'NineHD',
		'TEN HD' => 'TenHD',
	},
	'67' => {	# NSW: Griffith
		'ABC1' => 'ABC-NSW',
		'Prime' => 'PrimeS',
		'SBS' => 'SBS-NSW',
		'TEN' => 'Ten-NSW',
		'WIN' => 'WIN-NSW',
	},
	'90' => {	# VIC: Eastern Victoria
		'ABC1' => 'ABC-Vic',
		'Prime (Albury)' => 'Prime-Vic',
		'Prime (Regional)' => 'Prime-Vic',
		'SBS' => 'SBS-Vic',
		'TEN' => 'SC10-Vic',
		'WIN' => 'WIN-Vic',
	},
	'63' => {	# NSW: Broken Hill
		'ABC1' => 'ABC-NSW',
		'Central GTS/BKN' => 'GTS-BKN',
		'SBS' => 'SBS-NSW',
		'Sthn Cross TEN' => 'SC10-NSW',
	},
	'71' => {	# NSW: Southern NSW
		'ABC1' => 'ABC-NSW',
		'Prime (Canberra/South Coast)' => 'Prime-Can',
		'Prime (Orange)' => 'PrimeS',
		'Prime (Wagga Wagga)' => 'PrimeS',
		'Prime (Wollongong)' => 'PrimeS',
		'SBS' => 'SBS-NSW',
		'TEN (Mildura Digital)' => 'Ten-NSW',
		'TEN (NSW: Southern NSW)' => 'Ten-NSW',
		'WIN' => 'WIN-NSW',
	},
	'102' => {	# WA: Regional
		'ABC1' => 'ABC-WA',
		'Access 31' => '31-Per',
		'Golden West' => 'GWN-WA',
		'Nine' => 'Nine-WA',
		'SBS' => 'SBS-WA',
		'Seven' => 'Seven-WA',
		'TEN' => 'Ten-WA',
		'WIN' => 'WIN-WA',
	},
	'78' => {	# QLD: Gold Coast
		'ABC1' => 'ABC-Qld',
		'NBN' => 'NWN-GC',
		'Nine' => 'Nine-Qld',
		'Prime' => 'Prime-GC',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Bris',
		'Sthn Cross TEN' => 'SC10-GC',
		'TEN' => 'Ten-Qld',
	},
	'255' => {	# QLD: Sunshine Coast
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'256' => {	# QLD: Toowoomba
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'258' => {	# QLD: Wide Bay
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'254' => {	# QLD: Rockhampton
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'253' => {	# QLD: Mackay
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'257' => {	# QLD: Townsville
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'79' => {	# QLD: Cairns
		'ABC1' => 'ABC-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
		'TEN' => 'Ten-Qld',
		'WIN' => 'Win-Qld',
	},
	'107' => {	# SA: Remote & Central
		'ABC1' => 'ABC-SA',
		'Imparja' => 'IMP',
		'SBS' => 'SBS-SA',
		'Seven' => 'Seven-SA',
	},
	'88' => {	# Tasmania
		'ABC1' => 'ABC-Tas',
		'SBS' => 'SBS-Tas',
		'Southern Cross' => 'SC-Tas',
		'TDT' => 'TDT-Tas',
		'WIN' => 'Win-Tas',
	},
	'93' => {	# VIC: Geelong
		'ABC1' => 'ABC-Vic',
		'Channel 31' => '31-Mel',
		'Nine' => 'Nine-Mel',
		'SBS' => 'SBS-Vic',
		'Seven' => 'Seven-Mel',
		'TEN' => 'Ten-Vic',
	},
	'106' => {	# NSW: Remote and Central
		'ABC1' => 'ABC-NSW',
		'Imparja' => 'IMP',
		'Prime' => 'PrimeS',
		'SBS' => 'SBS-NSW',
		'Seven' => 'Seven-Syd',
	},
	'126' => {	# ACT
		'ABC1' => 'ABC-Can',
		'Prime' => 'Prime-Can',
		'SBS' => 'SBS-Can',
		'TEN' => 'Ten-Can',
		'WIN' => 'Win-Can',
	},
	'82' => {	# SA: Renmark
		'ABC1' => 'ABC-SA',
		'SBS' => 'SBS-SA',
		'WIN TEN' => 'TEN-SA',
		'WIN' => 'Win-Vic',
	},
	'74' => {	# NT: Darwin
		'ABC1' => 'ABC-NT',
		'Nine' => undef,
		'SBS' => 'SBS-NT',
		'Southern Cross' => 'SC10-Qld',
		#? 'Seven' => 'Seven-Dar',
	},
	'85' => {	# SA: South East SA
		'ABC1' => 'ABC-SA',
		'SBS' => 'SBS-SA',
		'WIN TEN' => 'TEN-SA',
		'WIN' => 'Win-Vic',
	},
	'83' => {	# SA: Riverland
		'ABC1' => 'ABC-SA',
		'SBS' => 'SBS-SA',
		'WIN TEN' => 'TEN-SA',
		'WIN' => 'Win-Vic',
	},
	'95' => {	# VIC: Mildura/Sunraysia
		'ABC1' => 'ABC-Vic',
		'Prime' => 'Prime-Vic',
		'SBS' => 'SBS-Vic',
		'TEN' => 'Ten-Vic',
		'WIN' => 'WIN-Vic',
	},
	'75' => {	# QLD: Brisbane
		'ABC1' => 'ABC-Qld',
		'Briz 31' => 'BRIZ',
		'Nine' => 'Nine-Qld',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Bris',
		'TEN' => 'Ten-Qld',
	},
	'94' => {	# VIC: Melbourne
		'ABC1' => 'ABC-Vic',
		'Channel 31' => '31-Mel',
		'Nine' => 'Nine-Mel',
		'SBS' => 'SBS-Vic',
		'Seven' => 'Seven-Mel',
		'TEN' => 'Ten-Vic',
	},
	'108' => {	# NT: Remote & Central
		'ABC1' => 'ABC-NT',
		'Imparja' => 'IMP',
		'SBS' => 'SBS-NT',
		'Seven' => 'Seven-Dar',
	},
	'114' => {	# QLD: Remote & Central
		'ABC1' => 'ABC-Qld',
		'Imparja' => 'IMP',
		'SBS' => 'SBS-Qld',
		'Seven' => 'Seven-Qld',
	},
	'184' => {	# NSW: Newcastle
		'ABC1' => 'ABC-NSW',
		'NBN' => 'NBN',
		'Prime' => 'PrimeN',
		'SBS' => 'SBS-NSW',
		'Sthn Cross TEN' => 'SC10-NSW',
	},
	'69' => {	# NSW: Northern NSW
		'ABC1' => 'ABC-NSW',
		'NBN' => 'NBN',
		'Prime (NSW: Northern NSW)' => 'PrimeN',
		'Prime NSW: Northern NSW' => 'PrimeN',
		'SBS' => 'SBS-NSW',
		'Sthn Cross TEN' => 'SC10-NSW',
	},
	'81' => {	# SA: Adelaide
		'ABC1' => 'ABC-SA',
		'C31 Adelaide' => '31-Adl',
		'Nine' => 'Nine-SA',
		'SBS' => 'SBS-SA',
		'Seven' => 'Seven-SA',
		'TEN' => 'Ten-SA',
	},
	'98' => {	# VIC: Western Victoria
		'ABC1' => 'ABC-Vic',
		'Imparja' => 'IMP',
		'Prime' => 'Prime-Vic',
		'SBS' => 'SBS-Vic',
		'Seven' => 'Seven-Mel',
		'TEN' => 'Ten-Vic',
		'WIN' => 'WIN-Vic',
	},
	'66' => {	# NSW: Central Coast
		'ABC1' => 'ABC-NSW',
		'NBN' => 'NBN',
		'Nine' => 'Nine-Syd',
		'Prime' => 'PrimeN',
		'SBS' => 'SBS-NSW',
		'Seven' => 'Seven-Syd',
		'Sthn Cross TEN' => 'SC10-NSW',
		'TEN' => 'Ten-NSW',
	},
	'73' => {	# NSW: Sydney
		'ABC1' => 'ABC-NSW',
		'Channel NSW' => undef,
		'Nine' => 'Nine-Syd',
		'SBS' => 'SBS-NSW',
		'Seven' => 'Seven-Syd',
		'TEN' => 'Ten-NSW',
		'TVS' => '31-Syd',
	},
	'101' => {	# WA: Perth
		'ABC1' => 'ABC-WA',
		'Access 31' => '31-Per',
		'Nine' => 'Nine-WA',
		'SBS' => 'SBS-WA',
		'Seven' => 'Seven-WA',
		'TEN' => 'Ten-WA',
	},
	'86' => {	# SA: Spencer Gulf
		'ABC1' => 'ABC-SA',
		'Central GTS/BKN' => 'GTS-BKN',
		'Nine' => 'Nine-SA',
		'SBS' => 'SBS-SA',
		'Sthn Cross TEN' => 'SC10-NSW',
	},
	'PAY' => {	# Pay channels
		'ACC' => 'ACC',
		# '????' => 'ADULT',
		# '????' => 'ADULT1',
		# '????' => 'ADULT2',
		# '????' => 'AdultsOnly960',
		'AIR' => 'AIRACT',
		# '????' => 'ALJA',
		'AnimalPlanet' => 'ANIMAL',
		# '????' => 'AntennaGreek',
		'AntennaPacific' => 'ANT',
		# '????' => 'ARCADE',
		'ARENATV2' => 'ARNA+2',
		'ARENATV' => 'ARNA',
		# '????' => 'ART',
		'Aurora' => 'AUR',
		# '????' => 'AV',
		'BBCWorld' => 'BBC',
		# '????' => 'BETHTV',
		'Bio' => 'BIOG',
		'BloombergTelevision' => 'BLM',
		# '????' => 'BNTV',
		'Boomerang' => 'BOOM',
		# '????' => 'CANALSUR',
		'CartoonNetwork' => 'CART',
		'ChannelV2' => 'V2',
		'ChannelV' => 'V',
		# '????' => 'Cinemax',
		# '????' => 'CLUBV',
		# '????' => 'CMTE',
		# '????' => 'CMTER1',
		# '????' => 'CMTER2',
		# '????' => 'CMTER3',
		# '????' => 'CMTER4',
		'CNBC' => 'CNBC',
		'CNN' => 'CNNI',
		# '????' => 'CNNfn',
		'CountryMusicChannel' => 'CMC',
		'CrimeandInvestigationNetwork' => 'CRIME',
		# '????' => 'D4NEWS',
		# '????' => 'DAAI',
		# '????' => 'DIG',
		# '????' => 'Digital4',
		# '????' => 'DIG-jazz',
		'DiscoveryChannel' => 'DISC',
		'DiscoveryHealth' => 'HEALTH',
		'DiscoveryRealTime' => 'DISCRT',
		'DiscoveryScience' => 'SCIENCE',
		'DiscoveryTravel' => 'TRAVEL',
		'DisneyChannel' => 'DISN',
		# '????' => 'DWTV',
		'E!Entertainment' => 'E!',
		# '????' => 'ENEWS-GE',
		# '????' => 'ENEWS-IT',
		# '????' => 'ENEWS-SP',
		# '????' => 'ERITV',
		# '????' => 'ERTGreek',
		'ESPN' => 'ESPN',
		# '????' => 'EURONEWS',
		'Eurosport' => 'EUROSPORT2',
		'Eurosportnews' => 'EUROSPORT',
		# '????' => 'EWTN',
		'EXPO' => 'EXPO',
		'FashionTV' => 'FASH',
		# '????' => 'FB01',
		# '????' => 'FB02',
		# '????' => 'FB03',
		# '????' => 'FB04',
		# '????' => 'FB05',
		# '????' => 'FB06',
		# '????' => 'FB07',
		# '????' => 'FB08',
		# '????' => 'FB09',
		# '????' => 'FB10',
		# '????' => 'FB11',
		# '????' => 'FB12',
		# '????' => 'FB13',
		# '????' => 'FB14',
		# '????' => 'FB15',
		# '????' => 'FB16',
		# '????' => 'FB17',
		# '????' => 'FB18',
		# '????' => 'FB19',
		# '????' => 'FB20',
		# '????' => 'FB21',
		# '????' => 'FB22',
		# '????' => 'FB23',
		# '????' => 'FB24',
		# '????' => 'FB25',
		# '????' => 'FB26',
		# '????' => 'FB27',
		# '????' => 'FFC',
		# '????' => 'FFC-NSW',
		# '????' => 'FFC-Qld',
		# '????' => 'FFC-SA',
		# '????' => 'FFC-Vic',
		# '????' => 'FFC-WA',
		'FOX82' => 'FOX8+2',
		'FOX8' => 'FOX8',
		'FOXClassics2' => 'CLAS+2',
		'FOXClassics' => 'CLAS',
		'FOXNews' => 'FOXN',
		'FOXSPORTS1' => 'FS1',
		'FOXSPORTS2' => 'FS2',
		'FOXSPORTS3' => 'FS3',
		'FOXSPORTSNews' => 'FSN',
		# '????' => 'FOXTELBoxOffice',
		# '????' => 'FOXTELGamesworld',
		'FUELTV' => 'FUEL',
		# '????' => 'GUIDE',
		# '????' => 'GWORLD',
		'Hallmark' => 'HALL',
		# '????' => 'HBOMovie',
		# '????' => 'HIST+2',
		# '????' => 'H&L',
		# '????' => 'HOUSE',
		'HOWTOChannel' => 'HOWTO',
		# '????' => 'ISHTAR',
		# '????' => 'JJJ',
		# '????' => 'LBC',
		# '????' => 'LEONARDO',
		'LifestyleChannel2' => 'LIFE+2',
		'LifeStyleFOOD' => 'FOOD',
		# '????' => 'LNTV',
		# '????' => 'MACQD',
		# '????' => 'MAIN',
		# '????' => 'MainEvent',
		'MAX' => 'max',
		# '????' => 'MCMTop',
		# '????' => 'MINDGAMES',
		'MOVIEEXTRA' => 'MOVX',
		'MOVIEGREATS' => 'MOVG',
		'MOVIEONE' => 'MOV1',
		'MOVIETWO' => 'MOV1+2',
		'MTV' => 'MTV',
		'NatGeoAdventure' => 'ADV1',
		'NationalGeographic' => 'NGEO',
		'Nickelodeon' => 'NICK',
		'NickJr' => 'NICKJR',
		'NITV' => 'NITV',
		# '????' => 'NoNag',
		# '????' => 'ODY',
		# '????' => 'OUT-TV',
		'Ovation' => 'OVAT',
		'PlayhouseDisney' => 'PHDISN',
		# '????' => 'PREVIEW',
		'RAIInternational' => 'RAI',
		# '????' => 'RMTV',
		# '????' => 'Sci-Fi',
		# '????' => 'SC-Tas',
		# '????' => 'SENATE',
		# '????' => 'ServiceNSW',
		'showcase' => 'SHWC',
		'SHOWTIME2' => 'SHW2',
		'SHOWTIMEGreats' => 'SHWGRTS',
		'SHOWTIME' => 'SHOW',
		'SkyNewsAustralia' => 'SKYN',
		'SkyNewsBusiness' => 'SKYB',
		'SkyRacing' => 'SKYR',
		# '????' => 'SPORTSEL',
		# '????' => 'StarMovies',
		# '????' => 'StarWorld',
		# '????' => 'STC',
		# '????' => 'STV1',
		# '????' => 'SYRIATV',
		# '????' => 'TABNSW',
		'TCM' => 'TCM',
		# '????' => 'Test',
		'THECOMEDYCHANNEL2' => 'CMDY+2',
		'THECOMEDYCHANNEL' => 'CMDY',
		'TheHistoryChannel' => 'HIST',
		'TheLifeStyleChannel' => 'LIFE',
		'TheWeatherChannel' => 'TWC',
		# '????' => 'TMF',
		'TV12' => 'TV1+2',
		'TV1' => 'TV1',
		# '????' => 'TV5',
		'TVChileSpanish' => 'TVCHILE',
		'TVE' => 'TVE',
		'TVN' => 'TVN',
		'UKTV2' => 'UKTV+2',
		'UKTV' => 'UKTV',
		'VH1' => 'VH1',
		# '????' => 'VTV',
		'W2' => 'W+2',
		# '????' => 'WEIN',
		# '????' => 'WINE',
		'WORLDMOVIES' => 'WMOV',
		'W' => 'W',
		# '????' => 'WZONE',
	}
);


################################################################################
# Routine for forcing the timezone of a listing to the local time zone.
# This has the effect of mimicing the time-shifting of national programmes
# such as ABC2 for which there is a single programme in, say, Sydney time, but
# where the programmes are broadcast at the same wall clock time everywhere in
# Australia.  
# Care is taken to use the local time zone at the time of the programme.
#
# Also defines a list of OzTivo channels names this kludge should be applied to.
#
sub force_local_timezone($) {
	my $oztivoTime = shift;

	# Split the given time into components ignoring the specified TZ
	# Our input looks like "20080324183000 +1100"
	#
	my ($year, $mon, $mday, $hr, $min, $sec) = $oztivoTime =~ m/^(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/;

	# Treat the time as being local and calculate the UNIX time
	# This will account for DST in our time zone.
	#
	my $unixTime = timelocal($sec, $min, $hr, $mday, $mon-1, $year); # expects months 0..11

	# Return a correctly formatted string
	#
	return strftime('%Y%m%d%H%M%S %z', localtime($unixTime));
}

my %force_timezone_set = map { $_ => 1 } ( values %{$s_to_o_map{'National'}} );


################################################################################
# Routines for configuring this grabber
#
sub please_configure_me
{
	print <<__EOM;
If you wish to use $nicename, please run
	tv_grab_au --configure $progname
Configuration of $progname is required
__EOM
}

sub configure
{
	print <<__EOM;
Configuring...
Before you can use the $nicename grabber, you must create a
OzTivo account here:
  http://minnie.tuhs.org/twiki/bin/view/TWiki/TWikiRegistration
... and select some channels here:
  http://minnie.tuhs.org/tivo-bin/tvguide.pl
When you're done, enter your username and password here, to
enable this grabber to retrieve your guide data automatically:
Username?
__EOM

	my $username = <>;
	chomp $username;
	unless ($username) {
		print "No username supplied. Exiting configuration.\n";
		exit 3;
	}
	print "Password?\n";
	my $pw = <>;
	chomp $pw;
	unless ($pw) {
		print "No password supplied. Exiting configuration.\n";
		exit 3;
	}
	print "Creating config file $config_file...\n";
	open (CONF, ">$config_file")
		or die "Unable to create $config_file: $!";
	print CONF "$username:$pw";
	close CONF;

	print "Done.\n";
	exit 0;
}

sub load_config() {
	unless (-r $config_file) {
		print "Can't find $config_file!\n";
		please_configure_me();
		exit 1;
	}

	print "Reading configuration file $config_file.\n";

	unless (open(CONF, $config_file)) {
		print "Unable to read config file $config_file: $!\n";
		please_configure_me();
		exit 1;
	}
	my $line = <CONF>;
	close CONF;

	unless ($line =~ /^(.*):(.*)$/) {
		print "Unable to parse config file!\n" .
			  "It should be in the format: username:password\n";
		please_configure_me();
		exit 1;
	}
	($user, $pw) = ($1, $2);

	unless ($user and $pw) {
		print "Failed to extract a sensible username and password from config file.\n";
		please_configure_me();
		exit 1;
	}
}

################################################################################
# Local extension of the shared get_url() to cater for password authentication 
# failure
#
# Returns the data as a string, or undef if data couild not be retrieved
#
sub get_url($) {
	my ($data, $success, $status, $bytes);

	my $url = shift;

	# Don't rely on Shepherd::Common::get_url()'s retry, because
	# if we get a 401 (wrong password) there's no point in retrying.
	my $max_tries = 3;
	foreach my $tries (1 .. $max_tries) {
		($data, $success, $status, $bytes) = Shepherd::Common::get_url(
				url => $url,
				referer => "Shepherd ".$nicename." grabber, version ".$version,
				delay => 1,
				retries => 0);

		last if ($success);

		print "Download failed: $status\n";
		if ($status =~ /401/)
		{
			print <<__EOM;
Your OzTivo username and/or password may be incorrect
The username and password you supplied when configuring the oztivo grabber
must match your registration details on the OzTivo.com site.
If this error persists, try reconfiguring:
	tv_grab_au --configure $progname
__EOM
			last;	# bail out of the retry loop
		}

		my $sleep = 47 + int(rand(120));
		print "Sleeping for $sleep seconds before retrying...\n";
		sleep($sleep);
	}

	# hack: if we don't get back something that looks like xml then try to
	# ungzip it
	$data = Compress::Zlib::memGunzip($data) if (substr($data,0,1) ne '<');

	return $data;
} 



################################################################################
#
$| = 1;

GetOptions(
	'config=s'			=> \$config_file,
	'channels_file=s'	=> \$channels_file,
	'output=s'			=> \$output_file,
	'version'			=> \$ver,
	'ready'				=> \$ready_check,
	'configure'			=> \$configure,
	'region=s'			=> \$region,
	'days:i'			=> \$days,			# Optional
);

print "$nicename Grabber v$version\n";
exit 0 if ($ver);	# Just print the version and leave

# Do the configuration if requested
# Load the configuration otherwise
#
configure() if ($configure);
load_config();

exit 0 if ($ready_check);	# Just print the version and leave

# Idiot checks on mandatory options
#
unless (defined($output_file)) {
	die "No --output file specified.\n";
}
unless (defined($region)) {
	die "No --region specified.\n";
}

# Import the Shepherd channels configuration
#
unless ($channels_file) { 
	die "No --channels_file specified.\n";
}
unless( -r $channels_file) { 
	die "Unable to read channels file $channels_file: $!";
}
{	# Block localises the variables
	local (@ARGV, $/) = ($channels_file);
	eval <>;
	die "\nError in channels file!\nDetails:\n$@" if ($@);
}


# Create the in-memory form of the output file
#
my $outdom = XML::LibXML::Document->new( '1.0', 'iso-8859-1' );
my $root = $outdom->createElement('tv');
$root->setAttribute('generator-info-name', $progname);
$outdom->setDocumentElement($root);

# Calculate the start and end date for the days requested
# #
my ($mday, $mon, $year) = (localtime)[3..5];
my $startdate = sprintf('%04d-%02d-%02d', $year+1900, $mon+1, $mday);
($mday, $mon, $year) = (localtime(time + ($days-1)*86400) )[3..5];
my $enddate = sprintf('%04d-%02d-%02d', $year+1900, $mon+1, $mday);

# Get the OzTivo datalist.xml file and interrogate it for;
# The base URL for each channel
# The data files available for today onward including their 
#	last modified date.
#

my $datalist = get_url("http://$user:$pw\@minnie.tuhs.org/xmltv/datalist.xml.gz");
unless (defined($datalist)) {
	die "\nError fetching data list xml file!\n";
}

# Make the user credentials safe
my $credentials = uri_escape($user) .':' . uri_escape($pw);

my $dlparser = XML::LibXML->new();		# For the datalist.xml file
my $progparser = XML::LibXML->new();	# For the programme data files

my $dlxml = $dlparser->parse_string($datalist);
foreach my $sname ( keys(%$channels), keys(%$opt_channels) ) {
	# Work out which OzTivo channel this Shepherd channel is
	# 
	# The order of search for a mapping is;
	# 	Region specific mapping (under numeric region code keys)
	#	National mapping (under hash key 'National')
	#	Pay TV mapping (under hash key 'PAY')
	# First mapping found wins.
	#
	my $oname = $s_to_o_map{$region}->{$sname};
	if (! defined($oname)) {	# Try a National channel
		$oname = $s_to_o_map{'National'}->{$sname};
	}
	if (! defined($oname)) {	# Try a PAY channel
		$oname = $s_to_o_map{'PAY'}->{$sname};
	}
	unless (defined($oname)) {
		print "\nNo region $region mapping from " .
			"Shepherd channel $sname to OzTivo channel\n\n";
		next;
	}

	# What XMLTV id is this channel. May be in either channels hash
	#
	my $xmltvid = defined($channels->{$sname}) ?  
		$channels->{$sname}: $opt_channels->{$sname};
	unless (defined($xmltvid)) {
		print "\nNo XMLTV id for Shepherd channel $sname\n\n";
		next;
	}

	# Construct a clone of select parts of the channel element in the output document.
	# Ignores non-XMLTV elements present in the datalist.xml file.
	#
	my ($channelnode) = $dlxml->findnodes('/tv/channel[@id="' . $oname . '"]');
	unless (defined($channelnode)) {
		print "\nCannot find the $oname channel element in the datalist.xml file\n";
		next;
	}
	my $newnode = $channelnode->cloneNode(0);
	$newnode->setAttribute('id', $xmltvid);
	foreach my $node ($channelnode->findnodes('display-name|url|icon')) {
		$newnode->appendChild($node->cloneNode(1));
	}
	$root->insertBefore($newnode, $root->firstChild);

	
	# Get the first base URL for the channel
	# and mangle our user name and password into it
	#
	my $baseurl = $dlxml->findvalue('/tv/channel[@id="' . $oname . '"]/base-url[1]');
	unless (defined($baseurl)) {
		print "\nCannot find the $oname baseurl in the datalist.xml file\n";
		next;
	}
	$baseurl =~ s!^(https?://)!$1$credentials\@!;

	# Process the list of data files for today or later
	#
	my @datafornodes = $dlxml->findnodes('/tv/channel[@id="' . $oname . '"]/datafor');
	unless (@datafornodes) {
		print "\nCannot find the $oname datafor records in the datalist.xml file\n";
		next;
	}
	foreach my $datafornode (@datafornodes) {
		my $filedate = $datafornode->findvalue('child::text()');

		if ($filedate ge $startdate && $filedate le $enddate ) {	# Today or future data
			# Build the source file name and fetch it
			# 
			my $url = $baseurl . uri_escape( $oname . '_' . $filedate . '.xml.gz' );
			my $progdata = get_url($url);
			unless ($progdata) {
				print "\nCannot retrieve the $oname programme data for $filedate\n";
				next;
			}

			# We have the data we need to actually build the output file
			#
			my $progxml = $progparser->parse_string($progdata);
			my @prognodes = $progxml->findnodes('/tv/programme');
			unless (@prognodes) {
				print "\nCannot find the $oname programme records in the $filedate file\n";
				next;
			}
			foreach my $prognode (@prognodes) {
				# Remove the node from the source document and make it part of
				# our output document.
				#
				$outdom->adoptNode($prognode);
				$root->appendChild($prognode);

				# Correct the channel attribute to use our desired XMLTV id
				# as specified in the channels.conf file.
				#
				$prognode->setAttribute('channel', $xmltvid);

				# If necessary force the local time zone onto the start and end times
				#
				if ($force_timezone_set{$oname}) {
					my $starttime = force_local_timezone($prognode->getAttribute('start'));
					my $stoptime = force_local_timezone($prognode->getAttribute('stop'));
					$prognode->setAttribute('start', $starttime);
					$prognode->setAttribute('stop', $stoptime);
				}
			}
			$progxml = undef;
		}
	}
}
$dlxml = undef;

# Write the output
#
$outdom->toFile($output_file, 1)
	or die "\nCould not create output file $output_file\n";

